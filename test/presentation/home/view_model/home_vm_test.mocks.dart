// Mocks generated by Mockito 5.4.4 from annotations
// in app_cat/test/presentation/home/view_model/home_vm_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i13;

import 'package:app_cat/domain/cat/model/cat.dart' as _i11;
import 'package:app_cat/domain/data/remote/interface/i_network_api_repository.dart'
    as _i2;
import 'package:app_cat/domain/data/remote/service/network_api_service.dart'
    as _i3;
import 'package:app_cat/infrastructure/data/remote/error/network_error_http.dart'
    as _i7;
import 'package:app_cat/presentation/home/view_model/home_vm.dart' as _i9;
import 'package:either_dart/either.dart' as _i6;
import 'package:flutter/material.dart' as _i10;
import 'package:get/get.dart' as _i4;
import 'package:get/get_state_manager/src/simple/list_notifier.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeINetworkApiRepository_0 extends _i1.SmartFake
    implements _i2.INetworkApiRepository {
  _FakeINetworkApiRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkApiService_1 extends _i1.SmartFake
    implements _i3.NetworkApiService {
  _FakeNetworkApiService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRxList_2<E> extends _i1.SmartFake implements _i4.RxList<E> {
  _FakeRxList_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInternalFinalCallback_3<T> extends _i1.SmartFake
    implements _i4.InternalFinalCallback<T> {
  _FakeInternalFinalCallback_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkApiService extends _i1.Mock implements _i3.NetworkApiService {
  MockNetworkApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.INetworkApiRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeINetworkApiRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.INetworkApiRepository);

  @override
  _i5.Future<_i6.Either<_i7.NetworkErrorHttp, dynamic>> getResponseApi(
    String? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getResponseApi,
          [url],
          {#headers: headers},
        ),
        returnValue:
            _i5.Future<_i6.Either<_i7.NetworkErrorHttp, dynamic>>.value(
                _i8.dummyValue<_i6.Either<_i7.NetworkErrorHttp, dynamic>>(
          this,
          Invocation.method(
            #getResponseApi,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i6.Either<_i7.NetworkErrorHttp, dynamic>>);
}

/// A class which mocks [HomeViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeViewModel extends _i1.Mock implements _i9.HomeViewModel {
  MockHomeViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.NetworkApiService get apiService => (super.noSuchMethod(
        Invocation.getter(#apiService),
        returnValue: _FakeNetworkApiService_1(
          this,
          Invocation.getter(#apiService),
        ),
      ) as _i3.NetworkApiService);

  @override
  set apiService(_i3.NetworkApiService? _apiService) => super.noSuchMethod(
        Invocation.setter(
          #apiService,
          _apiService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.RxList<_i10.Widget> get listCard => (super.noSuchMethod(
        Invocation.getter(#listCard),
        returnValue: _FakeRxList_2<_i10.Widget>(
          this,
          Invocation.getter(#listCard),
        ),
      ) as _i4.RxList<_i10.Widget>);

  @override
  set listCard(_i4.RxList<_i10.Widget>? _listCard) => super.noSuchMethod(
        Invocation.setter(
          #listCard,
          _listCard,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i11.Cat> get listCats => (super.noSuchMethod(
        Invocation.getter(#listCats),
        returnValue: <_i11.Cat>[],
      ) as List<_i11.Cat>);

  @override
  set listCats(List<_i11.Cat>? _listCats) => super.noSuchMethod(
        Invocation.setter(
          #listCats,
          _listCats,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.InternalFinalCallback<void> get onStart => (super.noSuchMethod(
        Invocation.getter(#onStart),
        returnValue: _FakeInternalFinalCallback_3<void>(
          this,
          Invocation.getter(#onStart),
        ),
      ) as _i4.InternalFinalCallback<void>);

  @override
  _i4.InternalFinalCallback<void> get onDelete => (super.noSuchMethod(
        Invocation.getter(#onDelete),
        returnValue: _FakeInternalFinalCallback_3<void>(
          this,
          Invocation.getter(#onDelete),
        ),
      ) as _i4.InternalFinalCallback<void>);

  @override
  bool get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  int get listeners => (super.noSuchMethod(
        Invocation.getter(#listeners),
        returnValue: 0,
      ) as int);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> loadInfoCat() => (super.noSuchMethod(
        Invocation.method(
          #loadInfoCat,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setCards({required List<_i11.Cat>? listData}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCards,
          [],
          {#listData: listData},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<String> getImageCat(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getImageCat,
          [id],
        ),
        returnValue: _i5.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #getImageCat,
            [id],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<List<_i11.Cat>> getDataApiCats() => (super.noSuchMethod(
        Invocation.method(
          #getDataApiCats,
          [],
        ),
        returnValue: _i5.Future<List<_i11.Cat>>.value(<_i11.Cat>[]),
      ) as _i5.Future<List<_i11.Cat>>);

  @override
  dynamic searchCat(String? value) => super.noSuchMethod(Invocation.method(
        #searchCat,
        [value],
      ));

  @override
  void update([
    List<Object>? ids,
    bool? condition = true,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #update,
          [
            ids,
            condition,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onReady() => super.noSuchMethod(
        Invocation.method(
          #onReady,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onClose() => super.noSuchMethod(
        Invocation.method(
          #onClose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #$configureLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Disposer addListener(_i12.GetStateUpdate? listener) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValue: () {},
      ) as _i12.Disposer);

  @override
  void removeListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refreshGroup(Object? id) => super.noSuchMethod(
        Invocation.method(
          #refreshGroup,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyChildrens() => super.noSuchMethod(
        Invocation.method(
          #notifyChildrens,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListenerId(
    Object? id,
    _i13.VoidCallback? listener,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removeListenerId,
          [
            id,
            listener,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Disposer addListenerId(
    Object? key,
    _i12.GetStateUpdate? listener,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListenerId,
          [
            key,
            listener,
          ],
        ),
        returnValue: () {},
      ) as _i12.Disposer);

  @override
  void disposeId(Object? id) => super.noSuchMethod(
        Invocation.method(
          #disposeId,
          [id],
        ),
        returnValueForMissingStub: null,
      );
}
